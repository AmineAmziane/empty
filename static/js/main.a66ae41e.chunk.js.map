{"version":3,"sources":["design/desktop-design-detail-dark.jpg","context/index.jsx","navbar/index.jsx","card/index.jsx","bodycard/index.jsx","info/index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","UserContext","React","createContext","UserProvider","state","darkmode","setDarkmode","setState","children","this","props","Provider","value","Component","Navbar","context","className","onClick","aria-hidden","contextType","Card","to","name","src","img","alt","population","region","capital","BodyCard","flag","options","words","getApi","e","a","fetch","api","json","data","map","i","push","samelettre","split","j","v","getRegion","target","getWords","type","placeholder","onChange","key","Info","pathParam","info","nativeName","topLevelDomain","subregion","currencies","borders","datapass","languages","path","match","params","bordersCode","lang","bord","ok","forEach","bordersApi","bordersObj","code","length","withRouter","App","basename","process","exact","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a66ae41e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/desktop-design-detail-dark.6e358223.jpg\";","import React, { Component } from \"react\";\r\n\r\nconst UserContext = React.createContext();\r\nclass UserProvider extends Component {\r\n  state = {\r\n    darkmode: false,\r\n  };\r\n  setDarkmode = () => {\r\n    this.setState({ darkmode: !this.state.darkmode });\r\n  };\r\n  render() {\r\n    const { children } = this.props;\r\n    const { darkmode } = this.state;\r\n    const { setDarkmode } = this;\r\n    return (\r\n      <UserContext.Provider\r\n        value={{\r\n          darkmode,\r\n          setDarkmode,\r\n        }}\r\n      >\r\n        {children}\r\n      </UserContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserContext;\r\n\r\nexport { UserProvider };\r\n","import React, { Component } from \"react\";\r\nimport UserContext from \"./../context/\";\r\nimport \"./index.scss\";\r\n\r\nclass Navbar extends Component {\r\n  static contextType = UserContext;\r\n  render() {\r\n    const { darkmode, setDarkmode } = this.context;\r\n    return (\r\n      <div className={darkmode ? \"darknav navbar\" : \"lightnav navbar\"}>\r\n        <h1>Where in the world?</h1>\r\n        <h3 onClick={() => setDarkmode(false)}>\r\n          <i className=\"fa fa-moon-o\" aria-hidden=\"true\"></i>\r\n          Dark Mode\r\n        </h3>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport img from \"./../design/desktop-design-detail-dark.jpg\";\r\nimport \"./index.scss\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Card = (props) => {\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"head\">\r\n        <Link to={`/${props.name}`}>\r\n          <img src={props.img} alt=\"\" />\r\n        </Link>\r\n      </div>\r\n      <div className=\"body\">\r\n        <h3>{props.name}</h3>\r\n        <p>\r\n          <span>Population :</span> {props.population}\r\n        </p>\r\n        <p>\r\n          <span>Region :</span> {props.region}\r\n        </p>\r\n        <p>\r\n          <span>Capital :</span> {props.capital}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React, { Component } from \"react\";\r\nimport Card from \"./../card/\";\r\nimport UserContext from \"./../context/\";\r\nimport \"./index.scss\";\r\nclass BodyCard extends Component {\r\n  static contextType = UserContext;\r\n  state = {\r\n    name: [],\r\n    flag: [],\r\n    population: [],\r\n    region: [],\r\n    capital: [],\r\n    options: \"All\",\r\n    words: \"\",\r\n  };\r\n  getApi = async (e) => {\r\n    this.setState({\r\n      name: [],\r\n      flag: [],\r\n      population: [],\r\n      region: [],\r\n      capital: [],\r\n    });\r\n    const api = await fetch(\"https://restcountries.eu/rest/v2/all\");\r\n    const data = await api.json();\r\n    let name = this.state.name;\r\n    let flag = this.state.flag;\r\n    let population = this.state.population;\r\n    let region = this.state.region;\r\n    let capital = this.state.capital;\r\n    let options = this.state.options;\r\n    let words = this.state.words;\r\n    data.map((i) => {\r\n      if (words === \"\") {\r\n        if (options === \"All\") {\r\n          name.push(i.name);\r\n          flag.push(i.flag);\r\n          population.push(i.population);\r\n          region.push(i.region);\r\n          capital.push(i.capital);\r\n        } else {\r\n          if (i.region === options) {\r\n            name.push(i.name);\r\n            flag.push(i.flag);\r\n            population.push(i.population);\r\n            region.push(i.region);\r\n            capital.push(i.capital);\r\n          }\r\n        }\r\n      } else {\r\n        let samelettre = true;\r\n        words.split(\"\").map((j, v) => {\r\n          if (j !== i.name.split(\"\")[v]) samelettre = false;\r\n          return true;\r\n        });\r\n        if (options !== \"All\") {\r\n          if (samelettre && i.region === options) {\r\n            name.push(i.name);\r\n            flag.push(i.flag);\r\n            population.push(i.population);\r\n            region.push(i.region);\r\n            capital.push(i.capital);\r\n          }\r\n        } else {\r\n          if (samelettre) {\r\n            name.push(i.name);\r\n            flag.push(i.flag);\r\n            population.push(i.population);\r\n            region.push(i.region);\r\n            capital.push(i.capital);\r\n          }\r\n        }\r\n      }\r\n      return true;\r\n    });\r\n    this.setState({\r\n      name: name,\r\n      flag: flag,\r\n      population: population,\r\n      region: region,\r\n      capital: capital,\r\n    });\r\n  };\r\n  getRegion = (e) => {\r\n    this.setState({ options: e.target.value });\r\n    this.getApi();\r\n  };\r\n  getWords = (e) => {\r\n    this.setState({ words: e.target.value });\r\n    this.getApi();\r\n  };\r\n  render() {\r\n    const { darkmode } = this.context;\r\n    return (\r\n      <div className={darkmode ? \"darkbodycard bodycard\" : \" bodycard\"}>\r\n        <div className=\"control\">\r\n          <div className=\"search\">\r\n            <i className=\"fa fa-search\" aria-hidden=\"true\"></i>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Search for a country...\"\r\n              onChange={this.getWords}\r\n            />\r\n          </div>\r\n          <div className=\"filter\">\r\n            <select onChange={this.getRegion}>\r\n              <option value=\"All\">All</option>\r\n              <option value=\"Africa\">Africa</option>\r\n              <option value=\"Americas\">Americas</option>\r\n              <option value=\"Asia\">Asia</option>\r\n              <option value=\"Europe\">Europe</option>\r\n              <option value=\"Oceania\">Oceania</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <div className=\"body\">\r\n          {this.state.name.map((i, v) => {\r\n            return (\r\n              <Card\r\n                img={this.state.flag[v]}\r\n                population={this.state.population[v]}\r\n                region={this.state.region[v]}\r\n                capital={this.state.capital[v]}\r\n                name={this.state.name[v]}\r\n                key={v}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  componentDidMount() {\r\n    this.getApi();\r\n  }\r\n}\r\n\r\nexport default BodyCard;\r\n","import React, { Component } from \"react\";\r\nimport \"./index.scss\";\r\nimport img from \"./../design/desktop-design-detail-dark.jpg\";\r\nimport { withRouter } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\nimport UserContext from \"./../context/\";\r\nclass Info extends Component {\r\n  static contextType = UserContext;\r\n  state = {\r\n    pathParam: \"\",\r\n    info: {\r\n      flag: \"\",\r\n      nativeName: \"\",\r\n      topLevelDomain: \"\",\r\n      population: \"\",\r\n      region: \"\",\r\n      subregion: \"\",\r\n      capital: \"\",\r\n      currencies: \"\",\r\n      borders: [],\r\n    },\r\n    datapass: true,\r\n    languages: [],\r\n  };\r\n  getApi = async () => {\r\n    let path = this.props.match.params.pathParam;\r\n    let bordersCode = \"\";\r\n    let lang = [];\r\n    let bord = [];\r\n\r\n    const api = await fetch(`https://restcountries.eu/rest/v2/name/${path}`);\r\n    const data = await api.json();\r\n\r\n    if (api.ok) {\r\n      let borders = data[0].borders;\r\n      data[0].languages.map((i) => {\r\n        return lang.push(i.name);\r\n      });\r\n      borders.forEach((i) => {\r\n        bordersCode += i + \";\";\r\n      });\r\n      const bordersApi = await fetch(\r\n        `https://restcountries.eu/rest/v2/alpha?codes=${bordersCode}`\r\n      );\r\n      const bordersObj = await bordersApi.json();\r\n      if (bordersApi.ok) {\r\n        bordersObj.map((i, v) => {\r\n          if (v < 3) bord.push(i.name);\r\n          return true;\r\n        });\r\n      }\r\n      this.setState({\r\n        pathParam: path,\r\n        info: {\r\n          flag: data[0].flag,\r\n          nativeName: data[0].name,\r\n          topLevelDomain: data[0].topLevelDomain,\r\n          population: data[0].population,\r\n          region: data[0].region,\r\n          subregion: data[0].subregion,\r\n          capital: data[0].capital,\r\n          currencies: data[0].currencies[0].code,\r\n          borders: bord,\r\n        },\r\n        datapass: true,\r\n        languages: lang,\r\n      });\r\n    } else {\r\n      this.setState({ datapass: false });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { darkmode } = this.context;\r\n    return (\r\n      <div className={darkmode ? \"darkinfo info\" : \"lightinfo info\"}>\r\n        <Link to=\"/\">\r\n          <button className=\"back\">\r\n            <i className=\"fa fa-long-arrow-left\" aria-hidden=\"true\"></i>Back\r\n          </button>\r\n        </Link>\r\n        {this.state.datapass === true ? (\r\n          <div className=\"inner-info\">\r\n            <div className=\"infoimg\">\r\n              <img src={this.state.info.flag} alt=\"\" />\r\n            </div>\r\n            <div>\r\n              <div className=\"col-2\">\r\n                <div>\r\n                  <h1>{this.state.pathParam}</h1>\r\n                  <p>\r\n                    <span>Native Name : </span>\r\n                    {this.state.info.nativeName}\r\n                  </p>\r\n                  <p>\r\n                    <span>Population : </span> {this.state.info.population}\r\n                  </p>\r\n                  <p>\r\n                    <span>Region : </span> {this.state.info.region}\r\n                  </p>\r\n                  <p>\r\n                    <span>Sub Region: </span>\r\n                    {this.state.info.subregion}\r\n                  </p>\r\n                  <p>\r\n                    <span>Capital : </span>\r\n                    {this.state.info.capital}\r\n                  </p>\r\n                </div>\r\n                <div>\r\n                  <p>\r\n                    <span>Top Level Domain : </span>{\" \"}\r\n                    {this.state.info.topLevelDomain}\r\n                  </p>\r\n                  <p>\r\n                    <span>Currencies : </span> {this.state.info.currencies}\r\n                  </p>\r\n                  <p>\r\n                    <span>Languages : </span>\r\n                    {this.state.languages.map((i, v) => {\r\n                      let lg;\r\n                      if (v === this.state.languages.length - 1) lg = \" \" + i;\r\n                      else lg = \" \" + i + \" ,\";\r\n                      return lg;\r\n                    })}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n              <div className=\"border\">\r\n                <p>\r\n                  <span>Border Countries : </span>\r\n                </p>\r\n                <ul>\r\n                  {this.state.info.borders.length === 0 ? (\r\n                    <li>No Borders</li>\r\n                  ) : (\r\n                    this.state.info.borders.map((i, v) => {\r\n                      return <li key={v}>{i}</li>;\r\n                    })\r\n                  )}\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div className=\"error404\">\r\n            <div className=\"in-er\">\r\n              <h1>404</h1>\r\n              <h1>error</h1>\r\n            </div>\r\n            <h3>Page not found</h3>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n  componentDidMount() {\r\n    this.getApi();\r\n  }\r\n}\r\n\r\nexport default withRouter(Info);\r\n","import React, { Component } from \"react\";\nimport Navbar from \"./navbar/\";\nimport BodyCard from \"./bodycard/\";\nimport Info from \"./info/\";\nimport { BrowserRouter, Route ,Switch} from \"react-router-dom\";\nimport { UserProvider } from \"./context/\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <UserProvider>\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n          <Switch>\n          <div className=\"App\">\n            <Navbar />\n            <Route exact path=\"/\" component={BodyCard} />\n            <Route exact path=\"/:pathParam\" component={Info} />\n          </div>\n          </Switch>\n        </BrowserRouter>\n      </UserProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}